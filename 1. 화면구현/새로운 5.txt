객체 

1. 객체 리터럴
	- 객체는 이름과 값을 한쌍을 묶은 데이터를 여러개 모은 것
	- 객체는 데이터 여러개를 하나로 모은 복합 데이터로 연관배열 또는 사전(Diction) 이라고 부릅니다.
{
	속성 : 값,
	속성 : 값,
	속성 : 값,
	...
}

기본형 값 : 숫자, 문자, 논리값, undefined, null -> 원시타입
객체
값 : 원시타입 값 + 객체

var person = {
    name : "이이름",
    age : 40
};

조회
person.name;
person['name']

[] : 속성명이 숫자일때 

- 객체의 속성들은 변수와 유사한 특징 

- person.name="값" -> 기존 속성에 값을 대입하면 값이 변경 

2. 객체 리터럴로 객체 생성하기
3. 프로퍼티(속성) 추가와 삭제
- 없는 속성에 대입 -> 추가
- 삭제 : delete 연산자 사용하여 삭제
	delete 변수명.속성명;

4. in 연산자로 프로퍼티(속성)가 있는지 확인하기

	속성명 in 변수...
	
	-> for문과 함께 주로 사용된다. : 객체의 내용물을 확인 
	
5. 메서드 : 객체의 속성값으로 함수가 정의되면 
	변수명.메서드명 (....);

6. 객체는 참조 타입
	주소값을 참조

함수 
- 일련의 처리를 하나로 모아 언제든 호출할 수 있도록 만들어 놓은것
- 기능 

1. 함수 선언문으로 함수 정의하기
function 함수명(매개변수, ...){
	// 기능을 수행하는 코드
	
	return 반환값;
}

function calc(x) {
    var y = x * 2 + 1;

    return y;
}

x -> 매개변수 

자바스크립트는 함수가 존재하지않는다. 즉 객체이다. 

2. 함수 호출
함수명(값); -> 실행

3. 함수의 실행흐름
- 번역
- 함수 객체(실행 X) -> 실행 가능한 객체 번역(Execution Context 객체) 

1급 함수(first class 함수) 
1) 함수가 값으로 사용된다. : 함수형 프로그래밍
	매개변수, 반환값 
	함수와 값이 동등
	
4. 함수 선언문의 끌어올림
5. 값으로서의 함수 : 1급 객체
6. 참조에 의한 호출과 값에 의한 호출

함수의 유효범위
var : 함수의 지역범위
- 동일한 변수명으로 선언하면 기존 값이 대체

2. 변수와 충돌 
