형변환
- 자료형간 변환 

1. 묵시적 형변환
	- 자동 형변환 
	- 작은 자료형 -> 큰 자료형 
	- 정수(덜 정밀한 숫자) -> 실수(더 정밀한 숫자)
	- 연산 중 자동 형변환  : 연산은 같은 자료형만 가능  -> 연산을 위해서 자동 형변환 
	
	byte(1) -> short(2) -> int(4) -> long(8) -> float(4) -> double(8)
				char(2~3)
					- 양의 정수
	
2. 명시적 형변환
	- 데이터의 유실이 발생할 가능성이 있는 경우 - 자동 형변환 X
		큰 자료형 -> 작은 자료형
		실수 -> 정수
	- 명시적으로 형변환 의사 표현 
		(자료형)값
		
기본자료형의 기본값
	정수형 : 0
	실수형 : 0.0
	논리형 : false
	
연산자

- 항과 연산자

- 항? : 연산에 사용되는 값 
	1 - 단항
	2 - 이항
	3 - 삼항
	조건식 ? 참일때 : 거짓일때
	
- 연산자? : 연산에 사용되는 기호

1. 대입 연산자 	
	=
	int num1 = 10;
	int num2 = 20;
	int result = num1 + num2;
	
	-> 연산자의 우선 순위가 가장 낮다.
	
2. 부호 연산자 : 단항 연산자
	(+, -)
	- 부호 반전
	
3. 산술 연산자  
	+,-,*,/,%
	
	% : 균등 배분 - 나머지는 나누는 수보다 작고, 0~나누는 수 -1
	
	+ : 수치 -> 숫자의 덧셈
		문자열 : 문자열 결합
		문자열 + 다른 자료형 : 문자열 기준으로 결합
		
		참고)
			문자열 : - 문자가 여러개 있는 형태 - 단어, 문자, "문구..."
			String 변수명 = "문자열...";
			
			char ch = 'A'; // 문자 1개
	
4. 증가감소 연산자	
	- 1씩 증가, 1씩 감소
	
	int num = 10;
	num = num + 1; --> num++; ++num;
	
5. 관계(비교) 연산자
	- 논리값 (참, 거짓)
	>, <, >=, <=, ==, !=
	- 연산의 결과 -> 논리값 -> 판별 / 조건식

6. 논리 연산자 -  연산의 결과 : 참, 거짓 판별

	- 논리값을 가지고 연산
	- AND 연산 : &&
			true && true -> true
			
	- OR 연산 : ||
			true || false -> true
			
	- NOT 연산 : !
			true || !true -> false

	연산자의 우선 순위
		비교 > 논리
	
- 단락회로 평가 

7. 복합 대입 연산자
	대입(=) + 다른 연산자(산술 ....)
	
8. 조건 연산자(삼항조건연산자)

조건식 ? 참일때 : 거짓일때
  1항		  2항		  3항

9. 연산자 우선순위

대입연산자(=) <  ..... 		논리 < 비교		....	  <	(...)



조건문
if (조건식) {
	// 조건식이 참일때 실행되는 코드
}

if (조건식) {
	//조건식이 참일때 실행되는 코드
} else {
	// 조건식이 거짓일때 
}

if (조건식1) {
	//조건식1이 참일때 실행되는 코드
} else if(조건식2){
	// 조건식1이 거짓 + 조건식2 참 
} else if(조건식3){
	// 조건식2이 거짓 + 조건식3 참 
} else {
	// 모든 조건이 거짓일때
}

선택문
switch(키워드) {
	case 값1 :
		// 키워드 == 값1 -> 실행되는 코드
		
	case 값2 :
		// 키워드 == 값2 -> 실행되는 코드
}

키워드 -> 정수만 가능  '...' 은 정수

반복문

1. while

while(조건식) {
	// 조건식이 참일때 반복 수행되는 코드 
}

2. do ~ while

do {
	// 조건식이 참일때 반복 수행되는 코드 
	// 조건식이 거짓이더라도 한번은 실행
} while (조건식);

3. for

for(초기화식; 조건식; 증감식) {
	// 조건식이 참일때 반복 수행되는 코드
}

반복 중단 : break
반복 건너뛰기 : continue - 현재 반복을 중단, 새로 시작

- 횟수, 순서(index)
- 관례적으로 초기화식 변수명 i 부터 시작하고 다음 알파벳부터 순서대로 사용

중첩 반복문
반복문 안에 반복문

for -> 구구단;

System.out.println(값);
	+ \n