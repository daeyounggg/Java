
생성자
- 클래스명과 동일한 명칭의 함수 
- 객체를 생성해 주는 역할 

참고)
데이터 영역 메모리(코드 & 상수 영역)

데이터 영역 메모리(코드 & 상수 영역 메모리)

클래스 로더 -> 클래스 파일 -> 데이터 영역 로드  

1. 디폴트 생성자(기본 생성자)
	- 클래스에 생성자 메서드가 정의된 것이 없으면 -> 컴파일러가 자동 추가
		public 클래스명() {}
		
2. 생성자 만들기
3. 생성자 오버로드

	메서드(함수)의 시그니처 
	패키지명 + 클래스명 + 반환값 타입 + 함수명 + 매개변수 + 예외 전가 
	
	- 함수의 시그니처 동일 -> 함수의 중복 정의
	- 함수의 시그니처가 다르면 -> 다른 함수를 정의 
	
정보 은닉
- 멤버 변수에 직접 값을 대입하는 것 -> 통제 불가 : 사용을 지양 (멤버 변수의 접근 제어자(private))
- 멤버 변수의 값을 확인할 수 있는 접근 가능한 메서드 추가
- 변수의 값을 지정할 수 있는 접근 가능한 메서드 추가

1. 접근제어자 정리
	public : 다른 패키지에서도 접근이 가능 
	protected : 동일 패키지에서 접근 가능(default) + 외부 패키지에 있는 클래스에서 상속을 받으면 클래스 내부에서 접근 가능(private)
	default : 접근 제어자를 명시 X  : 동일 패키지에서 접근 가능
	private : 클래스 내부에서만 접근 가능

	private < default < protected < public

	참고)
		다른 패키지에 있는 클래스를 사용하려면 import
		import 패키지명.클래스명;
		ㄴ
2. get(), set() 메서드 - 캡슐화
- getter() : 값 조회
- setter() : 값 지정

this 예약어		 
	지역변수 : 생성된 객체의 주소값
	메서드 : this(...) -> 생성자 메서드를 다른 생성자에서 호출 
			- 생성자 메서드의 첫번째 라인 정의

static 변수
1. static : 정적인
-> 정적인 방법으로 접근 권장
-> 클래스명으로 접근
-> 클래스 변수

static 메서드
-> 객체 생성과 상관없이 처음부터 호출 가능한 메서드
-> 클래스명으로 접근 가능
-> 클래스 메서드 
-> 인스턴스 자원을 사용 X(객체 생성과 관련 X)
-> this라는 지역 변수 X 

-> 정적 자원(변수, 메서드) : 객체 생성과 상관 없음!
-> 인스턴스 메서드 : 정적 자원 접근 가능

변수의 유효범위
1. 지역변수 
	: 메서드 내부에 정의된 변수 : 스택에서 생성되고 소멸
	
2. 멤버변수(인스턴스 변수)
	: 객체가 생성되면 존재하는 변수 : 힙에서 생성, 가비지 콜렉터에 의해서 제거 
	
3. static 변수 
	: 애플리케이션이 실행되면 생성(데이터 영역) -> 애플리케이션이 종료되면 제거 
	
static 응용 - 싱글톤 패턴
	- 필요할때만 객체를 1번만 생성하고 공유하는 패턴
	- 기본 생성자의 접근 제어자 private
	- 클래스 내부에서 정적 변수에 객체를 생성 
	- 외부에서 생성된 객체를 접근할 수 있는 정적 메서드 정의
	
데이터 영역 : 변경되지 않는 값 : 상수, 메서드 정의, 코드 ...
					정적 자원
					
기능 위주의 클래스 -> 객체를 여러개 생성할 필요 X
(기능 공유를 위한 클래스 -> static으로 메서드를 정의)
java.lang.Math					
-> 정적 자원은 처음부터 공간 O, 활성화 O
-> 사용하지 않아도 자원을 차지한다. -> 싱글톤 패턴

상속
1. 상속이란?

2. 클래스의 상속
3. 클래스 상속 문법

class 하위클래스 extends 상위클래스 {
	
}

4. super
	- this와 비슷 : 대상(상위 클래스)
	- 모든 메서드의 지역 변수 
	- super : 현재 생성된 상위 객체의 주소 값이 있는 지역변수
	- super() : 상위 클래스의 생성자 메서드
	
상위클래스 : 일반적인 개념

하위클래스 : 구체적인 개념	
	
메서드 재정의
1. 메소드 재정의 	
	- 상의클래스의 메서드명과 동일한 메서드 
	
2. 묵시적 형변환과 메서드 재정의
3. 가상메서드


다형성  
1. 다운 캐스팅과 instanceof				

-> instanceof : 객체의 출처를 체크

참조 변수 instanceof 클래스 ->  클래스로 부터 유래된 객체